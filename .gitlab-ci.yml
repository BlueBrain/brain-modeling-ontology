image: python:3.7

include:
  - project: cs/gitlabci-templates
    file: /build-image-using-kaniko.yml

stages:
  - test
  - register
  - generate
  - deploy

# TEST STAGE

# It runs only when a push is executed in a merge request and an ontology file has changed
# or when a commit is executed in develop branch and an ontology file has changed
# or when a new tag is pushed
test-ontologies-on-merge-request:
  stage: test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "develop"'
      when: always
    - if: $CI_COMMIT_TAG
      when: always
  script:
    - pytest tests/test_ontologies.py
  before_script:
    - pip install -r requirements.txt
variables:
  KUBERNETES_HELPER_MEMORY_REQUEST: 512Mi
  KUBERNETES_HELPER_MEMORY_LIMIT: 1Gi
#    KUBERNETES_MEMORY_LIMIT: 8Gi
#    KUBERNETES_MEMORY_REQUEST: 8Gi


# REGISTER STAGE

# It runs only when a commit is done on develop branch and the pipeline was triggered from a Merge Request
# and an ontology file has changed
register-on-staging-environment:
  stage: register
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "develop"'
      when: on_success
  script:
    - python register_ontologies.py --environment staging --token $NEXUS_TOKEN_STAGING
  before_script:
    - pip install -r requirements.txt

# It runs only when a new tag is pushed.
# It executes ontologies registration for the files changed between this version and the previous one
register-on-production-environment:
  stage: register
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
  script:
    - echo $CI_COMMIT_TAG
    - python register_ontologies.py --environment production --token $NEXUS_TOKEN_PRODUCTION --tag $CI_COMMIT_TAG
  before_script:
    - pip install -r requirements.txt

# GENERATE STAGE

# Building documentation for sphinx and ontodocs
# The docs are generated and stored in artifacts in order to be used in the deploy stage

# Generate ontodocs documentation and stores the artifact under /visualization
generate-ontodocs-documentation:
  stage: generate
  image: python:2.7
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "develop"'
      when: on_success
    - if: $CI_COMMIT_TAG
      when: on_success
  script:
    - pip install pyld==1.0.4 ontospy==1.9.1 rdflib==4.2.2 pygments==2.1.3
    - pip install git+https://$GITLAB_DEPLOY_TOKEN:$GITLAB_DEPLOY_PASSWORD@bbpgitlab.epfl.ch/dke/apps/ontodocs.git
    - mkdir visualization
    - ontodocs ./ontologies/bbp --theme lumen --outputpath visualization --title "Brain Modeling Ontology"
  artifacts:
    paths:
      - visualization
  variables:
    KUBERNETES_MEMORY_LIMIT: 4Gi
    KUBERNETES_MEMORY_REQUEST: 4Gi

# Generate sphinx documentation and stores the artifact under /generated/html
generate-sphinx-documentation:
  stage: generate
  image: python:3.7.12
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "develop"'
      when: on_success
    - if: $CI_COMMIT_TAG
      when: on_success
  script:
    - pip install .[docs]
    - sphinx-build -T --keep-going -b html -d _build/doctrees -c ./docs/source -D language=en ./docs/source generated/html
  artifacts:
    paths:
      - generated/html
  variables:
    KUBERNETES_MEMORY_LIMIT: 4Gi
    KUBERNETES_MEMORY_REQUEST: 4Gi

# DEPLOY STAGE

# Deploys the documentation to Openshift using Kaniko

# Executes deployment of ontodocs documentation to bbp-dke-staging Openshift
deploy-ontodocs-in-staging-openshift:
  stage: deploy
  extends: .build-image-using-kaniko
  dependencies:
    - generate-ontodocs-documentation
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "develop"'
      when: on_success
  variables:
    KANIKO_EXTRA_ARGS: "--build-arg GENERATED_DOCS_PATH=visualization"
    CI_REGISTRY_IMAGE: "docker-registry-default.ocp.bbp.epfl.ch/bbp-dke-staging/bmo-ontodocs"
    CI_REGISTRY_USER: $CI_REGISTRY_USER_STAGING
    CI_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD_STAGING

# Executes deployment of project documentation to bbp-dke-staging Openshift
deploy-sphinx-documentation-in-staging-openshift:
  stage: deploy
  extends: .build-image-using-kaniko
  dependencies:
    - generate-sphinx-documentation
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "develop"'
      when: on_success
  variables:
    KANIKO_EXTRA_ARGS: "--build-arg GENERATED_DOCS_PATH=generated/html"
    CI_REGISTRY_IMAGE: "docker-registry-default.ocp.bbp.epfl.ch/bbp-dke-staging/bmo-documentation"
    CI_REGISTRY_USER: $CI_REGISTRY_USER_STAGING
    CI_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD_STAGING
    KUBERNETES_MEMORY_LIMIT: 4Gi
    KUBERNETES_MEMORY_REQUEST: 4Gi

# Executes deployment of ontodocs documentation to bbp-dke-production Openshift
deploy-ontodocs-in-production-openshift:
  stage: deploy
  extends: .build-image-using-kaniko
  dependencies:
    - generate-ontodocs-documentation
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
  variables:
    KANIKO_EXTRA_ARGS: "--build-arg GENERATED_DOCS_PATH=visualization"
    CI_REGISTRY_IMAGE: "docker-registry-default.ocp.bbp.epfl.ch/bbp-dke-production/bmo-ontodocs"
    CI_REGISTRY_USER: $CI_REGISTRY_USER_PRODUCTION
    CI_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD_PRODUCTION


# Executes deployment of project documentation to bbp-dke-staging Openshift
deploy-sphinx-documentation-in-production-openshift:
  stage: deploy
  extends: .build-image-using-kaniko
  dependencies:
    - generate-sphinx-documentation
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
  variables:
    KANIKO_EXTRA_ARGS: "--build-arg GENERATED_DOCS_PATH=generated/html"
    CI_REGISTRY_IMAGE: "docker-registry-default.ocp.bbp.epfl.ch/bbp-dke-production/bmo-documentation"
    CI_REGISTRY_USER: $CI_REGISTRY_USER_PRODUCTION
    CI_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD_PRODUCTION
    KUBERNETES_MEMORY_LIMIT: 4Gi
    KUBERNETES_MEMORY_REQUEST: 4Gi
